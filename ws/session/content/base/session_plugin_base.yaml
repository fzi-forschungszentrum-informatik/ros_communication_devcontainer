---
parameters:
  dir_path: # will be set automatically by create_session.py
  before_command: # e.g. "echo test"
  ros_domain_id: # e.g. 47

  rec: false
  rec_command_1: "ros2 bag record -o ${dir_path}/rec_sync_ --regex '(.*)_sync$' --max-bag-size 5120"
  rec_command_2:
  rec_command_3:
  rec_command_4:

  # General OTA parameters
  # rmw_implementation: "rmw_cyclonedds_cpp"
  host_ip: # e.g. "machine_a ip"
  host_name: "" # e.g. "control_center"
  peers: # e.g. "machine_b ip + machine_c ip"
  qos_config_file: '""' # e.g. "/config/qos_config.yaml"

  in: false
  topic_list_paths_incoming: "" # e.g. "/machine_a,/machine_b"
  source_names: "" # e.g. "control_center"
  explicitly_adressed_incoming: false
  locally_used_source_name_incoming: false

  out: false
  topic_list_paths_outgoing: "" # e.g. "/machine_a,/machine_b"
  target_names: "" # e.g. "shuttle_ella,shuttle_anna"
  locally_used_source_name_outgoing: false

  # topic_list_prefixes_incoming: "" # e.g. "/machine_a,/machine_b"
  # remove_target_prefix_incoming: '""' # e.g. /machine_b
  # topic_list_prefixes_outgoing: "" # e.g. "/machine_a,/machine_b"
  # target_prefix_outgoing: '""' # e.g. /machine_a
  # sync_suffix: "_sync"

  topic_monitor: false

  heartbeat: false
  heartbeat_topics:
  heartbeat_delay_topic_1:
  heartbeat_delay_topic_2:

  ros1_bridge: false
  ros1_ip_key: # e.g. "machine_a ip"
  ros1_master_hostname_key: "localhost"
  ros1_master_port: 11311
  ros1_bridge_file:

common:
  before_commands:
    - if [ '${before_command}' != "None" ]; then ${before_command}; fi
    - if [ '${ros_domain_id}' != "None" ]; then export ROS_DOMAIN_ID=${ros_domain_id}; fi

windows:
  - name: REC
    if: rec
    layout: even-vertical
    splits:
      - commands:
        - if [ "${rec_command_1}" == "None" ]; then exit; fi
        - "${rec_command_1}"
      - commands:
        - if [ "${rec_command_2}" == "None" ]; then exit; fi
        - "${rec_command_2}"
      - commands:
        - if [ "${rec_command_3}" == "None" ]; then exit; fi
        - "${rec_command_3}"
      - commands:
        - if [ "${rec_command_4}" == "None" ]; then exit; fi
        - "${rec_command_4}"
    delay: 1
  - name: IN
    if: in
    splits:
      - commands:
        - export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp
        - export CYCLONEDDS_URI=$(/ws/dds_configs/get_cyclonedds_xml.py -i "${host_ip}" -p "${peers}")
        - export ROS_STATIC_PEERS=$(/ws/session/content/get_data_dict_entries.py -k "${peers}")
        - ros2 run com_py bridge_in --ros-args
            -p base_topic_files:=[${topic_list_paths_incoming}]
            -p host_name:=${host_name}
            -p qos_config_file:='${qos_config_file}'
            -p source_names:=[${source_names}]
            -p explicitly_adressed:=${explicitly_adressed_incoming}
      - commands:
        - ros2 run com_py relay_in --ros-args
            -p base_topic_files:=[${topic_list_paths_incoming}]
            -p host_name:=${host_name}
            -p qos_config_file:='${qos_config_file}'
            -p source_names:=[${source_names}]
            -p explicitly_adressed:=${explicitly_adressed_incoming}
            -p locally_used_source_name:=${locally_used_source_name_incoming}
  - name: OUT
    if: out
    splits:
      - commands:
        - export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp
        - export CYCLONEDDS_URI=$(/ws/dds_configs/get_cyclonedds_xml.py -i "${host_ip}" -p "${peers}")
        - export ROS_STATIC_PEERS=$(/ws/session/content/get_data_dict_entries.py -k "${peers}")
        - ros2 run com_py bridge_out --ros-args
            -p base_topic_files:=[${topic_list_paths_outgoing}]
            -p host_name:=${host_name}
            -p qos_config_file:='${qos_config_file}'
            -p target_names:=[${target_names}]
      - commands:
        - ros2 run com_py relay_out --ros-args
            -p base_topic_files:=[${topic_list_paths_outgoing}]
            -p host_name:=${host_name}
            -p qos_config_file:='${qos_config_file}'
            -p target_names:=[${target_names}]
            -p locally_used_source_name:=${locally_used_source_name_outgoing}
  - name: TOP
    if: topic_monitor
    splits:
      - commands:
        - ros2 run com_py topic_monitor
  - name: BEAT
    if: heartbeat
    splits:
      - commands:
        - ros2 run com_py heartbeat --ros-args -p topic_names:=[${heartbeat_topics}]
      - commands:
        - if [ "${heartbeat_delay_topic_1}" == "None" ]; then exit; fi
        - ros2 topic delay "${heartbeat_delay_topic_1}"
      - commands:
        - if [ "${heartbeat_delay_topic_2}" == "None" ]; then exit; fi
        - ros2 topic delay "${heartbeat_delay_topic_2}"
  - name: ROS1
    if: ros1_bridge
    splits:
      - commands:
        - if [ '${ros1_ip_key}' != "None" ]; then export ROS_IP=$(/ws/session/content/get_data_dict_entries.py -k "${ros1_ip_key}") && echo ${ROS1_IP}; fi
        - source /ros1_ws/devel/setup.bash
        - export ROS_MASTER_URI=http://$(/ws/session/content/get_data_dict_entries.py -k "${ros1_master_hostname_key}"):${ros1_master_port}
        - rosparam load ${ros1_bridge_file}
        - source /ros2_ros1_bridge_ws/install/setup.bash
        - ros2 run ros1_bridge parameter_bridge
